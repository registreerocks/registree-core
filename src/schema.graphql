# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Absolute {
  absolute: Int!
}

"""The academic year of study a student is in."""
enum AcademicYearOfStudy {
  YEAR_1
  YEAR_2
  YEAR_3_PLUS
}

"""A labelled academic year of study."""
type AcademicYearOfStudyLabel {
  academicYearOfStudy: AcademicYearOfStudy!

  """User-facing label for this year."""
  label: String!
}

union Amount = Absolute | Average | Percentage

type Average {
  average: Int!
}

type BillingDetails {
  addressee: String
  city: String
  country: String
  email: String
  line1: String
  line2: String
  province: String
  vat: String
  zip: String
}

type Contact {
  dbId: ID!
  email: String
  name: String
  userId: ID!
}

input CreateContactInput {
  email: String!
  name: String!
}

input CreateCustomerInput {
  description: String!
  initialContact: String!
  name: String!
}

input CreateEventQueryInput {
  academicYearOfStudyList: [AcademicYearOfStudy!]!
  address: String!
  attachments: [Upload!]
  degrees: [DegreeInput!]!
  endDate: DateTime!
  eventType: String!
  gender: [String!]
  information: String!
  message: String
  name: String!
  password: String
  race: [String!]
  startDate: DateTime!
}

type Customer {
  billingDetails: BillingDetails!
  contacts: [Contact!]!
  description: String
  id: ID!
  name: String!
}

type CustomerConnection {
  edges: [CustomerEdge!]
  pageInfo: PageInfo!
  totalCount: Int!
}

type CustomerEdge {
  cursor: String!
  node: Customer!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Degree {
  description: String!
  faculty: Faculty!
  id: ID!
  level: String!
  name: String!
}

input DegreeInput {
  absolute: Int
  average: Int
  degreeId: String!
  percentage: Int
}

type DegreeSelection {
  amount: Amount!
  degree: Degree!
}

type EventDetails {
  address: String!
  attachments: [UploadedFile!]!
  endDate: DateTime!
  eventType: String!
  information: String!
  invites: [Invitation!]!
  message: String
  metrics: EventMetrics!
  name: String!
  password: String
  startDate: DateTime!
}

type EventMetrics {
  acceptedCount: Int!
  attendedCount: Int!
  respondedCount: Int!
  viewedCount: Int!
}

type EventQuery {
  currentPrice: Float!
  customer: Customer!
  eventDetails: EventDetails!
  id: ID!
  queryDetails: QueryDetails!
  quoteDetails: Quote!
}

type EventQueryConnection {
  edges: [EventQueryEdge!]
  pageInfo: PageInfo!
  totalCount: Int!
}

type EventQueryEdge {
  cursor: String!
  node: EventQuery!
}

input ExpandEventQueryInput {
  academicYearOfStudyList: [AcademicYearOfStudy!]!
  degrees: [DegreeInput!]!
}

type Faculty {
  degrees: [Degree!]!
  description: String!
  groupedDegrees: [GroupedDegrees!]!
  id: ID!
  name: String!
  university: University!
}

type GroupedDegrees {
  degrees: [Degree!]!
  name: String!
}

type Invitation {
  accepted: Boolean!
  attended: Boolean!
  email: String
  invitationState: InvitationState!
  respondedAt: DateTime
  sentAt: DateTime
  viewedAt: DateTime
}

enum InvitationState {
  ACCEPTED
  ATTENDED
  NONE
  RESPONDED
  VIEWED
}

type Mutation {
  acceptPrivacyPolicy: DateTime!
  addAttachments(attachments: [Upload!]!, queryId: ID!): EventQuery!
  createContact(createContactInput: CreateContactInput!, customerId: ID!): Contact!
  createCustomer(createCustomerInput: CreateCustomerInput!): Customer!
  createQuery(createEventQueryInput: CreateEventQueryInput!): EventQuery!
  deleteAttachments(attachmentIds: [ID!]!, queryId: ID!): EventQuery!
  expandQuery(expandEventQueryInput: ExpandEventQueryInput!, queryId: ID!): EventQuery!
  setQueryInviteToAttendedAndLink(queryId: ID!): EventQuery!
  setQueryInviteToViewed(queryId: ID!): EventQuery!
  setRsvp(queryId: ID!, willAttend: Boolean!): EventQuery!
  updateBillingDetails(customerId: ID!, updateBillingDetailsInput: UpdateBillingDetailsInput!): Customer!
  updateContact(updateUserInput: UpdateContactInput!): Contact!
  updateCustomerDetails(customerId: ID!, updateCustomerDetailsInput: UpdateCustomerDetailsInput!): Customer!
  updateEventInfo(queryId: ID!, updateEventInfoInput: UpdateEventInfoInput!): EventQuery!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Percentage {
  percentage: Int!
}

type Query {
  acceptedPrivacyPolicy: Boolean!
  customer: Customer!

  """Get academic years of study to display."""
  getAcademicYearOfStudyLabels: [AcademicYearOfStudyLabel!]!
  getContact: Contact!
  getCustomer(customerId: ID!): Customer!
  getCustomers(after: String, before: String, first: Int, last: Int): CustomerConnection!
  getFaculty(facultyId: ID!): Faculty!
  getQueries(after: String, before: String, customerId: ID!, first: Int, last: Int): EventQueryConnection!
  getQuery(id: ID!): EventQuery!
  getQuote(createEventQueryInput: CreateEventQueryInput!): Quote!
  getStudent: Student!
  getStudentQueries(after: String, before: String, filter: StudentQueryFilter, first: Int, last: Int): EventQueryConnection!
  getUniversities: [University!]!
}

type QueryDetails {
  academicYearOfStudyList: [AcademicYearOfStudy!]!
  faculties: [Faculty!]!
  gender: [String!]!
  parameters: [DegreeSelection!]!
  race: [String!]!
  results(after: String, before: String, filter: QueryTranscriptFilter, first: Int, last: Int): QueryTranscriptConnection!
  updatedAt: DateTime!
}

type QueryTranscript {
  degree: Degree!
  degreeAverage: Float!
  degreeCompleted: Boolean!
  id: ID!
  latestTerm: Float!
  studentLink: StudentLink!
}

type QueryTranscriptConnection {
  edges: [QueryTranscriptEdge!]
  pageInfo: PageInfo!
  totalCount: Int!
}

type QueryTranscriptEdge {
  cursor: String!
  node: QueryTranscript!
}

input QueryTranscriptFilter {
  degreeCompleted: Boolean
  degreeIds: [ID!]
  eventAttended: Boolean
}

type Quote {
  numberOfStudents: Int!
  rsvpCostBreakdown: [RsvpCost!]!
}

type RsvpCost {
  cost: Float!
  percent: Int!
}

type Student {
  email: String!
  name: String!
  studentNumber: ID!
  userId: ID!
}

type StudentLink {
  id: ID!
  student: Student
}

input StudentQueryFilter {
  invitationState: InvitationState
}

type University {
  country: String!
  faculties: [Faculty!]!
  id: ID!
  name: String!
  physicalAddress: String!
  shortName: String!
}

input UpdateBillingDetailsInput {
  addressee: String
  city: String
  country: String
  email: String
  line1: String
  line2: String
  province: String

  """The vat number of the company, must match '/^4d{9}$/'"""
  vat: String
  zip: String
}

input UpdateContactInput {
  email: String
  name: String
  password: String
}

input UpdateCustomerDetailsInput {
  description: String
  name: String!
}

input UpdateEventInfoInput {
  address: String
  endDate: DateTime
  eventType: String
  information: String
  message: String
  name: String
  password: String
  startDate: DateTime
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadedFile {
  filename: String!
  id: ID!
  mimetype: String!
  url: String!
}
