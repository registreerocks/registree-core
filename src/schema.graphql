# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type BillingDetails {
  city: String
  country: String
  line1: String
  line2: String
  province: String
  zip: String
  vat: String
}

type Contact {
  email: String
  name: String
}

type Customer {
  id: ID!
  description: String!
  name: String!
  billingDetails: BillingDetails!
  contact: Contact!
}

type UploadedFile {
  filename: String!
  mimetype: String!
  url: String!
}

type EventDetails {
  address: String!
  startDate: DateTime!
  endDate: DateTime!
  attachments: [UploadedFile!]!
  information: String!
  name: String!
  eventType: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Degree {
  id: ID!
  degreeName: String!
}

type QueryTranscript {
  id: ID!
  degreeAverage: Float!
  degreeCompleted: Boolean!
  latestTerm: Float!
}

type QueryInvitation {
  accepted: Boolean!
  attended: Boolean!
  respondedAt: DateTime!
  sentAt: DateTime!
  viewedAt: DateTime!
}

type QueryStudent {
  firstName: String!
  lastName: String!
  studentId: String!
}

type Result {
  transcript: QueryTranscript!
  invite: QueryInvitation!
  studentInformation: QueryStudent!
}

type DegreeSelection {
  amount: Amount!
  degree: Degree!
  results: [Result!]!
}

union Amount = Absolute | Percentage

type Absolute {
  amount: Int!
}

type Percentage {
  percentage: Int!
}

type QueryDetails {
  selection: [DegreeSelection!]!
  updatedAt: DateTime!
}

type EventQuery {
  id: ID!
  customerId: ID!
  eventDetails: EventDetails!
  queryDetails: QueryDetails!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type EventQueryEdge {
  cursor: String!
  node: EventQuery!
}

type EventQueryConnection {
  edges: [EventQueryEdge!]
  nodes: [EventQuery!]
  pageInfo: PageInfo!
  totalCount: Int!
}

type Query {
  customer(id: ID!): Customer!
  getQueries(customerId: ID!, skip: Int, after: String, before: String, first: Int, last: Int): EventQueryConnection!
}

type Mutation {
  createQuery(createEventQueryInput: CreateEventQueryInput!): EventQuery!
}

input CreateEventQueryInput {
  name: String!
  address: String!
  startDate: DateTime!
  endDate: DateTime!
  info: String!
  message: String!
  degrees: [DegreeInput!]!
  eventType: String!
  attachments: [Upload!]
}

input DegreeInput {
  degreeId: String!
  degreeName: String!
  absolute: Int
  percentage: Int
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload
