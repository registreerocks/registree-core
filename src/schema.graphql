# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type BillingDetails {
  addressee: String
  city: String
  country: String
  email: String
  line1: String
  line2: String
  province: String
  vat: String
  zip: String
}

type Contact {
  email: String
  name: String
  userId: ID!
  dbId: ID!
}

type Customer {
  id: ID!
  description: String
  name: String!
  billingDetails: BillingDetails!
  contacts: [Contact!]!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type CustomerEdge {
  cursor: String!
  node: Customer!
}

type CustomerConnection {
  edges: [CustomerEdge!]
  pageInfo: PageInfo!
  totalCount: Int!
}

type Student {
  email: String!
  name: String!
  userId: ID!
  studentNumber: ID!
}

type RsvpCost {
  cost: Float!
  percent: Int!
}

type Quote {
  numberOfStudents: Int!
  rsvpCostBreakdown: [RsvpCost!]!
}

type Degree {
  id: ID!
  name: String!
  description: String!
  faculty: Faculty!
  level: String!
}

type GroupedDegrees {
  name: String!
  degrees: [Degree!]!
}

type Faculty {
  id: ID!
  name: String!
  description: String!
  university: University!
  groupedDegrees: [GroupedDegrees!]!
  degrees: [Degree!]!
}

type University {
  id: ID!
  country: String!
  name: String!
  physicalAddress: String!
  shortName: String!
  faculties: [Faculty!]!
}

type UploadedFile {
  id: ID!
  filename: String!
  mimetype: String!
  url: String!
}

type Invitation {
  accepted: Boolean!
  attended: Boolean!
  respondedAt: DateTime
  sentAt: DateTime
  viewedAt: DateTime
  email: String
  invitationState: InvitationState!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

enum InvitationState {
  NONE
  VIEWED
  RESPONDED
  ACCEPTED
  ATTENDED
}

type EventMetrics {
  acceptedCount: Int!
  attendedCount: Int!
  respondedCount: Int!
  viewedCount: Int!
}

type EventDetails {
  address: String!
  startDate: DateTime!
  endDate: DateTime!
  attachments: [UploadedFile!]!
  information: String!
  message: String
  name: String!
  eventType: String!
  invites: [Invitation!]!
  metrics: EventMetrics!
  password: String
}

type DegreeSelection {
  amount: Amount!
  degree: Degree!
}

union Amount = Absolute | Percentage

type Absolute {
  absolute: Int!
}

type Percentage {
  percentage: Int!
}

type StudentLink {
  id: ID!
  student: Student
}

type QueryTranscript {
  id: ID!
  degreeAverage: Float!
  degreeCompleted: Boolean!
  latestTerm: Float!
  degree: Degree!
  studentLink: StudentLink!
}

type QueryTranscriptEdge {
  cursor: String!
  node: QueryTranscript!
}

type QueryTranscriptConnection {
  edges: [QueryTranscriptEdge!]
  pageInfo: PageInfo!
  totalCount: Int!
}

type QueryDetails {
  parameters: [DegreeSelection!]!
  faculties: [Faculty!]!
  results(filter: QueryTranscriptFilter, after: String, before: String, first: Int, last: Int): QueryTranscriptConnection!
  updatedAt: DateTime!
}

input QueryTranscriptFilter {
  degreeIds: [ID!]
  degreeCompleted: Boolean
  eventAttended: Boolean
}

type EventQuery {
  id: ID!
  customer: Customer!
  eventDetails: EventDetails!
  queryDetails: QueryDetails!
  quoteDetails: Quote!
  currentPrice: Float!
}

type EventQueryEdge {
  cursor: String!
  node: EventQuery!
}

type EventQueryConnection {
  edges: [EventQueryEdge!]
  pageInfo: PageInfo!
  totalCount: Int!
}

type Query {
  customer: Customer!
  getCustomer(customerId: ID!): Customer!
  getCustomers(after: String, before: String, first: Int, last: Int): CustomerConnection!
  getContact: Contact!
  getStudent: Student!
  studentPrivacyPolicy: DateTime!
  getQuote(createEventQueryInput: CreateEventQueryInput!): Quote!
  getQueries(customerId: ID!, after: String, before: String, first: Int, last: Int): EventQueryConnection!
  getStudentQueries(filter: StudentQueryFilter, after: String, before: String, first: Int, last: Int): EventQueryConnection!
  getQuery(id: ID!): EventQuery!
  getUniversities: [University!]!
}

input CreateEventQueryInput {
  name: String!
  address: String!
  startDate: DateTime!
  endDate: DateTime!
  information: String!
  message: String
  degrees: [DegreeInput!]!
  eventType: String!
  attachments: [Upload!]
  password: String
}

input DegreeInput {
  degreeId: String!
  absolute: Int
  percentage: Int
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input StudentQueryFilter {
  invitationState: InvitationState
}

type Mutation {
  updateBillingDetails(updateBillingDetailsInput: UpdateBillingDetailsInput!, customerId: ID!): Customer!
  updateCustomerDetails(updateCustomerDetailsInput: UpdateCustomerDetailsInput!, customerId: ID!): Customer!
  createCustomer(createCustomerInput: CreateCustomerInput!): Customer!
  createContact(customerId: ID!, createContactInput: CreateContactInput!): Contact!
  updateContact(updateUserInput: UpdateContactInput!): Contact!
  setStudentPrivacyPolicy: DateTime!
  updateEventInfo(updateEventInfoInput: UpdateEventInfoInput!, queryId: ID!): EventQuery!
  addAttachments(attachments: [Upload!]!, queryId: ID!): EventQuery!
  deleteAttachments(attachmentIds: [ID!]!, queryId: ID!): EventQuery!
  setQueryInviteToViewed(queryId: ID!): EventQuery!
  setRsvp(willAttend: Boolean!, queryId: ID!): EventQuery!
  setQueryInviteToAttendedAndLink(queryId: ID!): EventQuery!
  createQuery(createEventQueryInput: CreateEventQueryInput!): EventQuery!
  expandQuery(expandEventQueryInput: ExpandEventQueryInput!, queryId: ID!): EventQuery!
}

input UpdateBillingDetailsInput {
  addressee: String
  city: String
  country: String
  email: String
  line1: String
  line2: String
  province: String

  """The vat number of the company, must match '/^4d{9}$/'"""
  vat: String
  zip: String
}

input UpdateCustomerDetailsInput {
  description: String
  name: String!
}

input CreateCustomerInput {
  description: String!
  name: String!
}

input CreateContactInput {
  email: String!
  name: String!
}

input UpdateContactInput {
  email: String
  name: String
  password: String
}

input UpdateEventInfoInput {
  name: String
  address: String
  startDate: DateTime
  endDate: DateTime
  information: String
  message: String
  eventType: String
  password: String
}

input ExpandEventQueryInput {
  degrees: [DegreeInput!]!
}
